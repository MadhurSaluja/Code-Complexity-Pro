Let's analyze the complexity of the given code.

**calculate_factorial(n) function:**

* The function has a recursive call to itself with `n-1` as the argument.
* The base case is when `n` is 0, and it returns 1.
* The recursive calls will continue until `n` reaches 0.
* The time complexity of this function is O(n), where n is the input number. This is because the function calls itself recursively n times.
* The space complexity is O(n) as well, due to the recursive call stack.

**is_prime(num) function:**

* The function has a for loop that iterates from 2 to `num-1`.
* Inside the loop, there is a constant-time operation to check if `num` is divisible by `i`.
* The loop will run `num-2` times.
* The time complexity of this function is O(n), where n is the input number. This is because the loop iterates n times.
* The space complexity is O(1), because there are no additional data structures or recursive calls that depend on the input size.

**Main code:**

* The main code calls `calculate_factorial(5)` and `is_prime(11)`, which have a constant time complexity.
* The overall time complexity of the main code is O(1), because it only involves constant-time operations.

In summary, the overall time complexity of the code is O(n), where n is the input number to the `calculate_factorial` and `is_prime` functions. The space complexity is O(n) for the `calculate_factorial` function and O(1) for the `is_prime` function and the main code.